{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAmByB;AAEzB,MAAa,IAAI;IAkBf,IAAI,QAAQ,CAAC,KAAa;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IACD,IAAI,SAAS,CAAC,MAAc;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACD,QAAQ;QACN,4BAA4B;QAC5B,0EAA0E;QAC1E,IAAI;QACJ,MAAM,GAAG,GAAG,IAAA,0BAAQ,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACzC,0CAA0C;YAC1C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;gBACnD,OAAO,CAAC,GAAG,CAAC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;gBAC1C,cAAc,CAAC,MAAM,CAAC,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACtB;iBACG;gBACF,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;gBAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACrB;QACH,CAAC,CAAC,CAAC;QAGH,2CAA2C;QAC3C,SAAS,cAAc,CAAC,MAAyB;YAC/C,0CAA0C;YAC1C,6EAA6E;YAC7E,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBACzB,IAAI,OAAO,CAAC,WAAW,EAAE;oBACvB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;wBACtD,KAAK,CAAC,KAAK,CAAC,CAAC;qBACd;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,IAAA,kCAAgB,EAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,gDAAgD,EAAE,MAAM,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CAEF;AA5DC;IAAC,IAAA,2BAAS,EAAC,CAAC,CAAC;IACZ,IAAA,2BAAS,EAAC,EAAE,CAAC;IACb,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;mCACE;AAGf;IAAC,IAAA,qBAAG,EAAC,CAAC,CAAC;IACP,WAAW;;IACV,IAAA,uBAAK,GAAE;;oCACQ;AAXlB,oBA6DC;AACD,yDAAyD;AAEzD,IAAI;AACJ,IAAI;AACJ,KAAK;AACL,wDAAwD;AACxD,UAAU;AACV,qCAAqC;AACrC,uBAAuB;AACvB,mBAAmB;AACnB,kEAAkE;AAClE,eAAe;AACf,SAAS;AACT,MAAM;AAEN,sCAAsC;AACtC,qCAAqC;AACrC,yBAAyB;AACzB,oCAAoC;AACpC,uBAAuB;AACvB,sCAAsC;AACtC,wBAAwB;AACxB,wBAAwB;AACxB,uBAAuB;AACvB,OAAO;AAEP,mCAAmC;AACnC,gCAAgC","sourcesContent":["import {\r\n  validate,\r\n  validateOrReject,\r\n  Contains,\r\n  IsInt,\r\n  Min,\r\n  Max,\r\n  MinLength,\r\n  MaxLength,\r\n  IsDefined,\r\n  ValidationError,\r\n  ValidationArguments,\r\n  maxLength,\r\n  isDefined,\r\n  isString,\r\n  IsString,\r\n  IsEmpty,\r\n  IsNotEmpty,\r\n  minLength,\r\n} from \"class-validator\";\r\nimport { ProjectInput } from \"./ProjectInput.js\";\r\nexport class Post {\r\n  @MinLength(2)\r\n  @MaxLength(15)\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  title?: string;\r\n\r\n \r\n  @Min(1)\r\n  // @Max(10)\r\n  @IsInt()\r\n  amount!: number;\r\n  // [Symbol.iterator]: function* () {\r\n  //   let properties = Object.keys(this);\r\n  //   for (let i of properties) {\r\n  //       yield [i, this[i]];\r\n  //   }\r\n  isValid!: boolean\r\n  set setTitle(title: string) {\r\n    this.title = title;\r\n  }\r\n  set setAmount(amount: number) {\r\n    this.amount = amount;\r\n  }\r\n  validate() {\r\n    // if(Array.isArray(input)){\r\n    //   [this.title, this.amount] = <[string,number]>input.gatherUserInput();\r\n    // }\r\n    const val = validate(this).then((errors) => {\r\n      // errors is an array of validation errors\r\n      if (errors.length > 0) {\r\n        console.log(\"validation failed. errors: \", errors);\r\n        console.log(typeof errors[0].constraints);\r\n        alertAllErrors(errors);\r\n        this.isValid = false;\r\n      }\r\n      else{\r\n        console.log(\"validation succeed\");\r\n        this.isValid = true;\r\n      }\r\n    });\r\n    \r\n\r\n    //alert function for showing errors infront\r\n    function alertAllErrors(errors: ValidationError[]) {\r\n      // errors is an array of validation errors\r\n      // has property object 'constraints' which has the error description messages\r\n      errors.forEach((element) => {\r\n        if (element.constraints) {\r\n          for (const value of Object.values(element.constraints)) {\r\n            alert(value);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    validateOrReject(this).catch((errors) => {\r\n      console.log(\"Promise rejected (validation failed). Errors: \", errors);\r\n    });\r\n    return this.isValid;\r\n  }\r\n\r\n}\r\n// function alertErrorMessages(errors:ValidationError[]){\r\n\r\n// }\r\n// }\r\n// or\r\n// async function validateOrRejectExample(input: Post) {\r\n//   try {\r\n//     await validateOrReject(input);\r\n//   } catch (errors) {\r\n//     console.log(\r\n//       \"Caught promise rejection (validation failed). Errors: \",\r\n//       errors\r\n//     );\r\n//   }\r\n\r\n// export interface ValidatorOptions {\r\n//   skipMissingProperties?: boolean;\r\n//   whitelist?: boolean;\r\n//   forbidNonWhitelisted?: boolean;\r\n//   groups?: string[];\r\n//   dismissDefaultMessages?: boolean;\r\n//   validationError?: {\r\n//     target?: boolean;\r\n//     value?: boolean;\r\n//   };\r\n\r\n//   forbidUnknownValues?: boolean;\r\n//   stopAtFirstError?: boolean;\r\n"]}