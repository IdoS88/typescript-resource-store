{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,qDAqByB;AAEzB,MAAa,IAAI;IAYf,IAAI,QAAQ,CAAC,KAAa;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IACD,IAAI,SAAS,CAAC,MAAc;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACY,QAAQ;;YACnB,2CAA2C;YAC3C,SAAS,cAAc,CAAC,MAAyB;gBAC/C,0CAA0C;gBAC1C,6EAA6E;gBAC7E,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;oBACzB,IAAI,OAAO,CAAC,WAAW,EAAE;wBACvB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;4BACtD,KAAK,CAAC,KAAK,CAAC,CAAC;yBACd;qBACF;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,IAAA,0BAAQ,EAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;gBACtD,cAAc,CAAC,SAAS,CAAC,CAAC;gBAC1B,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;gBAClC,OAAO,IAAI,CAAC;aACb;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;CACF;AA3CC;IAAC,IAAA,2BAAS,EAAC,CAAC,CAAC;IACZ,IAAA,2BAAS,EAAC,EAAE,CAAC;IACb,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;mCACE;AAEf;IAAC,IAAA,qBAAG,EAAC,MAAM,CAAC,gBAAgB,CAAC;IAC5B,IAAA,qBAAG,EAAC,CAAC,CAAC;IACN,IAAA,uBAAK,GAAE;;oCACQ;AAVlB,oBA4CC","sourcesContent":["import {\r\n  validate,\r\n  validateOrReject,\r\n  Contains,\r\n  IsInt,\r\n  Min,\r\n  Max,\r\n  MinLength,\r\n  MaxLength,\r\n  IsDefined,\r\n  ValidationError,\r\n  ValidationArguments,\r\n  maxLength,\r\n  isDefined,\r\n  isString,\r\n  IsString,\r\n  IsEmpty,\r\n  IsNotEmpty,\r\n  minLength,\r\n  MAX,\r\n  ValidatorOptions,\r\n} from \"class-validator\";\r\nimport { ProjectInput } from \"./ProjectInput.js\";\r\nexport class Post {\r\n  @MinLength(2)\r\n  @MaxLength(15)\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  title?: string;\r\n\r\n  @Max(Number.MAX_SAFE_INTEGER)\r\n  @Min(1)\r\n  @IsInt()\r\n  amount!: number;\r\n\r\n  set setTitle(title: string) {\r\n    this.title = title;\r\n  }\r\n  set setAmount(amount: number) {\r\n    this.amount = amount;\r\n  }\r\n  public async validate(): Promise<boolean> {\r\n    //alert function for showing errors infront\r\n    function alertAllErrors(errors: ValidationError[]) {\r\n      // errors is an array of validation errors\r\n      // has property object 'constraints' which has the error description messages\r\n      errors.forEach((element) => {\r\n        if (element.constraints) {\r\n          for (const value of Object.values(element.constraints)) {\r\n            alert(value);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    const valErrors = await validate(this);\r\n\r\n    if (valErrors.length > 0) {\r\n      console.log(\"validation failed. errors: \", valErrors);\r\n      alertAllErrors(valErrors);\r\n      return false;\r\n    } else {\r\n      console.log(\"validation succeed\");\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"]}