{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAmByB;AAEzB,MAAa,IAAI;IAYf,oCAAoC;IACpC,wCAAwC;IACxC,gCAAgC;IAChC,4BAA4B;IAC5B,MAAM;IACN,IAAI,QAAQ,CAAC,KAAa;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IACD,IAAI,SAAS,CAAC,MAAc;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACD,QAAQ,CAAC,KAAuB;QAC9B,4BAA4B;QAC5B,0EAA0E;QAC1E,IAAI;QACJ,IAAA,0BAAQ,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAC7B,0CAA0C;YAC1C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;gBACnD,OAAO,CAAC,GAAG,CAAC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;gBAC1C,cAAc,CAAC,MAAM,CAAC,CAAC;aACxB;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;aACnC;QACH,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,SAAS,cAAc,CAAC,MAAyB;YAC/C,0CAA0C;YAC1C,6EAA6E;YAC7E,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBACzB,IAAI,OAAO,CAAC,WAAW,EAAE;oBACvB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;wBACtD,KAAK,CAAC,KAAK,CAAC,CAAC;qBACd;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,IAAA,kCAAgB,EAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,gDAAgD,EAAE,MAAM,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAjDC;IAJC,IAAA,2BAAS,EAAC,CAAC,CAAC;IACZ,IAAA,2BAAS,EAAC,EAAE,CAAC;IACb,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;mCACE;AAMf;IAHC,IAAA,qBAAG,EAAC,CAAC,CAAC;IACN,IAAA,qBAAG,EAAC,EAAE,CAAC;IACP,IAAA,uBAAK,GAAE;;oCACQ;AAXlB,oBAsDC;AACD,yDAAyD;AAEzD,IAAI;AACJ,IAAI;AACJ,KAAK;AACL,wDAAwD;AACxD,UAAU;AACV,qCAAqC;AACrC,uBAAuB;AACvB,mBAAmB;AACnB,kEAAkE;AAClE,eAAe;AACf,SAAS;AACT,MAAM;AAEN,sCAAsC;AACtC,qCAAqC;AACrC,yBAAyB;AACzB,oCAAoC;AACpC,uBAAuB;AACvB,sCAAsC;AACtC,wBAAwB;AACxB,wBAAwB;AACxB,uBAAuB;AACvB,OAAO;AAEP,mCAAmC;AACnC,gCAAgC","sourcesContent":["import {\n  validate,\n  validateOrReject,\n  Contains,\n  IsInt,\n  Min,\n  Max,\n  MinLength,\n  MaxLength,\n  IsDefined,\n  ValidationError,\n  ValidationArguments,\n  maxLength,\n  isDefined,\n  isString,\n  IsString,\n  IsEmpty,\n  IsNotEmpty,\n  minLength,\n} from \"class-validator\";\nimport { ProjectInput } from \"./ProjectInput.js\";\nexport class Post {\n  @MinLength(2)\n  @MaxLength(15)\n  @IsString()\n  @IsNotEmpty()\n  title?: string;\n\n \n  @Min(0)\n  @Max(10)\n  @IsInt()\n  amount?: number;\n  // [Symbol.iterator]: function* () {\n  //   let properties = Object.keys(this);\n  //   for (let i of properties) {\n  //       yield [i, this[i]];\n  //   }\n  set setTitle(title: string) {\n    this.title = title;\n  }\n  set setAmount(amount: number) {\n    this.amount = amount;\n  }\n  validate(input: [string, number]) {\n    // if(Array.isArray(input)){\n    //   [this.title, this.amount] = <[string,number]>input.gatherUserInput();\n    // }\n    validate(this).then((errors) => {\n      // errors is an array of validation errors\n      if (errors.length > 0) {\n        console.log(\"validation failed. errors: \", errors);\n        console.log(typeof errors[0].constraints);\n        alertAllErrors(errors);\n      } else {\n        console.log(\"validation succeed\");\n      }\n    });\n\n    //alert function for showing errors infront\n    function alertAllErrors(errors: ValidationError[]) {\n      // errors is an array of validation errors\n      // has property object 'constraints' which has the error description messages\n      errors.forEach((element) => {\n        if (element.constraints) {\n          for (const value of Object.values(element.constraints)) {\n            alert(value);\n          }\n        }\n      });\n    }\n    validateOrReject(this).catch((errors) => {\n      console.log(\"Promise rejected (validation failed). Errors: \", errors);\n    });\n  }\n}\n// function alertErrorMessages(errors:ValidationError[]){\n\n// }\n// }\n// or\n// async function validateOrRejectExample(input: Post) {\n//   try {\n//     await validateOrReject(input);\n//   } catch (errors) {\n//     console.log(\n//       \"Caught promise rejection (validation failed). Errors: \",\n//       errors\n//     );\n//   }\n\n// export interface ValidatorOptions {\n//   skipMissingProperties?: boolean;\n//   whitelist?: boolean;\n//   forbidNonWhitelisted?: boolean;\n//   groups?: string[];\n//   dismissDefaultMessages?: boolean;\n//   validationError?: {\n//     target?: boolean;\n//     value?: boolean;\n//   };\n\n//   forbidUnknownValues?: boolean;\n//   stopAtFirstError?: boolean;\n"]}