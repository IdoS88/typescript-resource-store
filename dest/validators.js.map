{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,qDAsByB;AAEzB,MAAa,IAAI;CAwBhB;AAXC;IAXG,IAAA,yBAAO,GAAE;IACT,IAAA,0BAAQ,GAAE;IACV,IAAA,2BAAS,EAAC,CAAC,EAAE;QACV,OAAO,EAAE,CAAC,IAAyB,EAAE,EAAE;YACrC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,OAAO,0CAA0C,CAAC;aACnD;iBAAM;gBACL,OAAO,+BAA+B,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;aAC9E;QACH,CAAC;KACF,CAAC;;mCACS;AAOf;IAJC,IAAA,yBAAO,GAAE;IACT,IAAA,uBAAK,GAAE;IACP,IAAA,qBAAG,EAAC,CAAC,CAAC;IACN,IAAA,qBAAG,EAAC,EAAE,CAAC;;oCACQ;AApBlB,oBAwBC;AACD,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AACtB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,kBAAkB;AACnC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACjB,IAAA,0BAAQ,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;IAC7B,0CAA0C;IAC1C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;KACpD;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;KACnC;AACH,CAAC,CAAC,CAAC;AAEH,IAAA,kCAAgB,EAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;IACtC,OAAO,CAAC,GAAG,CAAC,gDAAgD,EAAE,MAAM,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC;AACH,KAAK;AACL,SAAe,uBAAuB,CAAC,KAAW;;QAChD,IAAI;YACF,MAAM,IAAA,kCAAgB,EAAC,KAAK,CAAC,CAAC;SAC/B;QAAC,OAAO,MAAM,EAAE;YACf,OAAO,CAAC,GAAG,CACT,wDAAwD,EACxD,MAAM,CACP,CAAC;SACH;IACH,CAAC;CAAA;AAED,sCAAsC;AACtC,qCAAqC;AACrC,yBAAyB;AACzB,oCAAoC;AACpC,uBAAuB;AACvB,sCAAsC;AACtC,wBAAwB;AACxB,wBAAwB;AACxB,uBAAuB;AACvB,OAAO;AAEP,mCAAmC;AACnC,gCAAgC;AAChC,IAAI","sourcesContent":["import {\n  validate,\n  validateOrReject,\n  Contains,\n  IsInt,\n  Length,\n  IsEmail,\n  IsFQDN,\n  IsDate,\n  Min,\n  Max,\n  MinLength,\n  MaxLength,\n  IsDefined,\n  ValidationError,\n  ValidationArguments,\n  maxLength,\n  isDefined,\n  isString,\n  IsString,\n  IsEmpty,\n  ValidatorOptions\n} from \"class-validator\";\n\nexport class Post {\n\n    @IsEmpty()\n    @IsString()\n    @MinLength(2, {\n        message: (args: ValidationArguments) => {\n          if (args.value.length === 2) {\n            return 'Too short, minimum length is 2 character';\n          } else {\n            return 'Too short, minimum length is ' + args.constraints[0] + ' characters';\n          }\n        },\n      })\n  title!: string;\n\n\n  @IsEmpty()\n  @IsInt()\n  @Min(0)\n  @Max(10)\n  amount!: number;\n      \n  \n\n}\nlet post = new Post();\npost.title = \"\"; // should not pass\npost.amount = -2;\nvalidate(post).then((errors) => {\n  // errors is an array of validation errors\n  if (errors.length > 0) {\n    console.log(\"validation failed. errors: \", errors);\n  } else {\n    console.log(\"validation succeed\");\n  }\n});\n\nvalidateOrReject(post).catch((errors) => {\n  console.log(\"Promise rejected (validation failed). Errors: \", errors);\n});\n// or\nasync function validateOrRejectExample(input: Post) {\n  try {\n    await validateOrReject(input);\n  } catch (errors) {\n    console.log(\n      \"Caught promise rejection (validation failed). Errors: \",\n      errors\n    );\n  }\n}\n\n// export interface ValidatorOptions {\n//   skipMissingProperties?: boolean;\n//   whitelist?: boolean;\n//   forbidNonWhitelisted?: boolean;\n//   groups?: string[];\n//   dismissDefaultMessages?: boolean;\n//   validationError?: {\n//     target?: boolean;\n//     value?: boolean;\n//   };\n\n//   forbidUnknownValues?: boolean;\n//   stopAtFirstError?: boolean;\n// }\n"]}