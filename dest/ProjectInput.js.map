{"version":3,"file":"ProjectInput.js","sourceRoot":"","sources":["../src/ProjectInput.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,6CAAkC;AAElC,qBAAqB;AACrB,SAAgB,QAAQ,CAAC,CAAM,EAAE,EAAU,EAAE,UAA8B;IACzE,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;IACxC,MAAM,aAAa,GAAuB;QACxC,YAAY,EAAE,IAAI;QAClB,GAAG;YACD,MAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,OAAO,OAAO,CAAC;QACjB,CAAC;KACF,CAAC;IACF,OAAO,aAAa,CAAC;AACvB,CAAC;AAVD,4BAUC;AAED,qBAAqB;AACrB,MAAa,YAAY;IAMrB,wCAAwC;IAE1C;;QACE,kDAAkD;QAClD,oBAAoB;QACpB,6BAA6B;QAC7B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAoB,CAAC;QAExE,4CAA4C;QAC5C,kCAAkC;QAClC,SAAS;QACT,KAAK;QACL,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAoB,CAAC;QACxE,kCAAkC;QAClC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI;YAAE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,CACjD,OAAO,CACY,CAAC;QACtB,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI;YAAE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC/D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAClD,kBAAkB,CACC,CAAC;QACtB,wDAAwD;QACxD,cAAc;QACd,yBAAyB;QAEzB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,iBAAiB;IACnB,CAAC;IACM,eAAe;QACpB,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAChD,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QACpD,uDAAuD;QAEvD,OAAO;QACP,uCAAuC;QACvC,sCAAsC;QACtC,6CAA6C;QAC7C,MAAM;QACN,+CAA+C;QAC/C,YAAY;QACZ,WAAW;QACT,OAAO,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC;QACvC,IAAI;IACN,CAAC;IAEM,WAAW;QAChB,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,EAAE,CAAC;QACnC,sCAAsC;IACxC,CAAC;IAGM,aAAa,CAAC,KAAY;QAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACzC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC5B,IAAI,SAAS,GAAG,IAAI,iBAAI,EAAE,CAAC;YAC3B,CAAC,SAAS,CAAC,KAAK,EAAC,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;YAC/C,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC9B,sBAAsB;SACvB;aAED;YACE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SACxB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;CAMF;AAxBC;IADC,QAAQ;;qCACmB,KAAK;;iDAchC;AAzEH,oCAmFC;AAED,MAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC","sourcesContent":["\nimport {Post} from './validators';\nimport { ValidationOptions } from 'class-validator';\n// autobind decorator\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    },\n  };\n  return adjDescriptor;\n}\n\n// ProjectInput Class\nexport class ProjectInput {\n  //   templateElement: HTMLTemplateElement;\n  hostElement: HTMLDivElement;\n  element: HTMLFormElement;\n  nameInputElement: HTMLInputElement;\n  amountInputElement: HTMLInputElement;\n    // peopleInputElement: HTMLInputElement;\n  \n  constructor() {\n    // this.templateElement = document.getElementById(\n    //   'project-input'\n    // )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(\"status\")! as HTMLDivElement;\n\n    // const importedNode = document.importNode(\n    //   this.templateElement.content,\n    //   true\n    // );\n    this.element = document.querySelector(\"#formInsert\") as HTMLFormElement;\n    // this.element.id = 'user-input';\n    if (this.element == null) console.log(\"null element\");\n    this.nameInputElement = this.element?.querySelector(\n      \"#type\"\n    ) as HTMLInputElement;\n    if (this.nameInputElement == null) console.log(\"null element\");\n    this.amountInputElement = this.element.querySelector(\n      \"#amountInsertion\"\n    ) as HTMLInputElement;\n    // this.peopleInputElement = this.element.querySelector(\n    //   '#people'\n    // ) as HTMLInputElement;\n\n    this.configure();\n    // this.attach();\n  }\n  public gatherUserInput(): [string, number] | void {\n    const enteredName = this.nameInputElement.value;\n    const enteredAmount = this.amountInputElement.value;\n    // const enteredPeople = this.peopleInputElement.value;\n\n    // if (\n    //   enteredName.trim().length === 1 ||\n    //   enteredAmount.trim().length === 0\n    //   //   ||enteredPeople.trim().length === 0\n    // ) {\n    //   alert(\"Invalid input, please try again!\");\n    //   return;\n    // } else }\n      return [enteredName, +enteredAmount];\n    // }\n  }\n\n  public clearInputs() {\n    this.nameInputElement.value = \"\";\n    this.amountInputElement.value = \"\";\n    // this.peopleInputElement.value = '';\n  }\n\n  @autobind\n  public submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      let validator = new Post();\n      [validator.title,validator.amount] = userInput;\n      validator.validate(userInput);\n      // this.clearInputs();\n    }\n    else\n    {\n      console.log(userInput);\n    }\n    return userInput;\n  }\n\n  public configure() {\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n\n  //   private attach() {\n  //     this.hostElement.insertAdjacentElement('afterbegin', this.element);\n  //   }\n  \n}\n\nconst prjInput = new ProjectInput();\n"]}