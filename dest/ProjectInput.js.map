{"version":3,"file":"ProjectInput.js","sourceRoot":"","sources":["../src/ProjectInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Post } from \"./validators.js\";\r\nimport { validate, ValidationOptions } from \"class-validator\";\r\nimport { Resource, ResourceStorage, Result } from \"./resource.js\";\r\nimport { ProjectOutput } from \"./ProjectOutput.js\";\r\n// autobind decorator\r\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\r\n  console.log(descriptor);\r\n  const originalMethod = descriptor.value;\r\n  const adjDescriptor: PropertyDescriptor = {\r\n    configurable: true,\r\n    get() {\r\n      const boundFn = originalMethod.bind(this);\r\n      return boundFn;\r\n    },\r\n  };\r\n  return adjDescriptor;\r\n}\r\n\r\n// return type to specify the action for the addResource function\r\nenum InputType {\r\n  Insert = \"insert\",\r\n  Borrow = \"borrow\",\r\n}\r\n\r\n// a \"generator\" function to set appropriate name for resource\r\nfunction toTitleCase(str: string) {\r\n  return str.replace(\r\n    /\\w\\S*/g,\r\n    function(txt) {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    }\r\n  );\r\n}\r\n\r\n// ProjectInput Class\r\nexport class ProjectInput<T extends HTMLSelectElement | HTMLInputElement> {\r\n\r\n  element: HTMLFormElement;\r\n  nameInputElement: T;\r\n  amountInputElement: HTMLInputElement;\r\n\r\n  constructor(\r\n    formElement: string,\r\n    nameElement: string, // input text for name of resource\r\n    amountElement: string // input text for amount of resource\r\n  ) {\r\n    this.element = document.querySelector(`#${formElement}`) as HTMLFormElement;\r\n\r\n    this.nameInputElement = this.element.querySelector(\r\n      `#${nameElement}`\r\n    ) as T;\r\n\r\n    \r\n    this.amountInputElement = this.element.querySelector(\r\n      `#${amountElement}`\r\n    ) as HTMLInputElement;\r\n\r\n    this.configure();\r\n  }\r\n\r\n\r\n  public gatherUserInput(): [string, number] | void {\r\n    // a function for retrieving inputs from text inputs in form\r\n    const enteredName = this.nameInputElement.value;\r\n    const enteredAmount = this.amountInputElement.value;\r\n \r\n \r\n    return [enteredName, +enteredAmount];\r\n  }\r\n\r\n  public clearInputs() {\r\n    // reseting default to inputs in form\r\n    this.nameInputElement.value = \"\";\r\n    this.amountInputElement.value = \"\";\r\n  }\r\n\r\n  @autobind\r\n  public async submitHandler(event: Event) {\r\n    // a listner for both forms for adding a new resource or updating an existing one\r\n    event.preventDefault();\r\n    const userInput = this.gatherUserInput(); // retrieve inputs from form\r\n    if (Array.isArray(userInput)) { // if there are inputs\r\n      let validator = new Post();\r\n      [validator.title, validator.amount] = userInput;\r\n      if (await validator.validate()) { // validate if inputs are appropriate and valid\r\n        validator.title = toTitleCase(validator.title.trim()); // after validator convert title to appropriate one\r\n        // first validate the input\r\n        if (this.nameInputElement instanceof HTMLInputElement) {\r\n          // in case of inserting a new resource or existing resource\r\n          if (\r\n            data.addResource(validator.title, validator.amount) ===\r\n            Result.Add // if the action is adding a new resource\r\n          ) {\r\n            this.addOptionBorrow(validator.title); // adds option to the borrow select options\r\n          }\r\n        } else {\r\n          // in case of borrowing a resource\r\n          // action can only reduce amount from existing resource\r\n          data.UpdateExistingItemOrBorrowItem = new Resource(\r\n            validator.title,\r\n            -Math.abs(validator.amount)\r\n            // makes negative to reduce resource amount\r\n          );\r\n        }\r\n      }\r\n      this.clearInputs();\r\n    } else {\r\n      console.log(\"inputs are invalid\");\r\n    }\r\n  }\r\n\r\n  public configure() {\r\n    // a listner for both forms for adding a new resource or updating an existing one\r\n    this.element.addEventListener(\"submit\", this.submitHandler);\r\n    if (this.nameInputElement instanceof HTMLSelectElement) {\r\n      // a listner for the second form for removing empty or unincluded resources\r\n      this.element.addEventListener(\"submit\", this.amountHandler);\r\n    }\r\n  }\r\n\r\n  public addOptionBorrow(title: string) {\r\n    // a function for first form for adding a new item to select list of the second form\r\n\r\n    let select = document.getElementById(\"list\")!;\r\n    let newOption = document.createElement(\"option\");\r\n    newOption.value = title;\r\n    newOption.id = \"option-\" + title; // stating it's an option to prevent from amountHandler function to remove any HTMLElement that isn't an option from select list\r\n    console.log(newOption.tagName + \" \" + newOption.nodeName);\r\n    newOption.innerHTML = title;\r\n    select.appendChild(newOption);\r\n    console.log(select);\r\n  }\r\n\r\n  @autobind\r\n  public amountHandler(event: Event) {\r\n    // a function to remove empty resurces from borrow select list\r\n    let select = document.getElementById(\"list\")! as HTMLSelectElement;\r\n    if (data.getResources) {\r\n      let array = Array.from(select.options);\r\n      for (let i = 0; i < select.length; i++) {\r\n        let check = data.getResources?.slice().filter((r) => {\r\n          if (r.getResourceName.localeCompare(select.options[i].value) === 0) // check if option exists in resources array\r\n            return true;\r\n          else return false;\r\n        }); // filter to know if resource option still included in the array\r\n        if (Array.isArray(check) && check.length < 1)\r\n          // resource option isn't included in array, resource was empty and deleted\r\n          select.options.remove(i);\r\n        //therefore remove the option of empty resource from options list\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const data = ResourceStorage.getInstance();\r\n// first insertion form\r\nconst prjInputInsert = new ProjectInput<HTMLInputElement>(\r\n  \"formInsert\",\r\n  \"type\",\r\n  \"amountInsertion\"\r\n);\r\n// second borrow form\r\nconst prjInputBorrow = new ProjectInput<HTMLSelectElement>(\r\n  \"formBorrow\",\r\n  \"list\",\r\n  \"amountBorrow\"\r\n);\r\n//third window for output of resources status\r\nexport const prjOutput = new ProjectOutput();\r\n"]}