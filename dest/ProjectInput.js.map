{"version":3,"file":"ProjectInput.js","sourceRoot":"","sources":["../src/ProjectInput.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAqB;AACrB,SAAS,QAAQ,CAAC,CAAM,EAAE,EAAU,EAAE,UAA8B;IAClE,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;IACxC,MAAM,aAAa,GAAuB;QACxC,YAAY,EAAE,IAAI;QAClB,GAAG;YACD,MAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,OAAO,OAAO,CAAC;QACjB,CAAC;KACF,CAAC;IACF,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,qBAAqB;AACrB,MAAM,YAAY;IAMlB,0CAA0C;IAExC;;QACE,kDAAkD;QAClD,oBAAoB;QACpB,6BAA6B;QAC7B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAoB,CAAC;QAExE,4CAA4C;QAC5C,kCAAkC;QAClC,SAAS;QACT,KAAK;QACL,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAoB,CAAC;QACxE,kCAAkC;QAClC,IAAG,IAAI,CAAC,OAAO,IAAI,IAAI;YACnB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAChC,IAAI,CAAC,gBAAgB,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,CACjD,OAAO,CACY,CAAC;QACtB,IAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI;YAChC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAClD,kBAAkB,CACC,CAAC;QACtB,wDAAwD;QACxD,cAAc;QACd,yBAAyB;QAEzB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,iBAAiB;IACnB,CAAC;IAEO,eAAe;QACrB,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAChD,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QACpD,uDAAuD;QAEvD,IACE,WAAW,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC;YAC/B,aAAa,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC;QACnC,wCAAwC;UACtC;YACA,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAC1C,OAAO;SACR;aAAM;YACL,OAAO,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,EAAE,CAAC;QACnC,sCAAsC;IACxC,CAAC;IAGO,aAAa,CAAC,KAAY;QAChC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACzC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC5B,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,SAAS,CAAC;YAClC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;IACH,CAAC;IAEO,SAAS;QACf,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;CAKF;AAjBC;IADC,QAAQ;;qCACoB,KAAK;;iDAQjC;AAWH,MAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC","sourcesContent":["// autobind decorator\nfunction autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    }\n  };\n  return adjDescriptor;\n}\n\n// ProjectInput Class\nclass ProjectInput {\n//   templateElement: HTMLTemplateElement;\n  hostElement: HTMLDivElement;\n  element: HTMLFormElement;\n  nameInputElement: HTMLInputElement;\n  amountInputElement: HTMLInputElement;\n//   peopleInputElement: HTMLInputElement;\n\n  constructor() {\n    // this.templateElement = document.getElementById(\n    //   'project-input'\n    // )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById('status')! as HTMLDivElement;\n\n    // const importedNode = document.importNode(\n    //   this.templateElement.content,\n    //   true\n    // );\n    this.element = document.querySelector('#formInsert') as HTMLFormElement;\n    // this.element.id = 'user-input';\n    if(this.element == null)\n        console.log(\"null element\");\n    this.nameInputElement = this.element?.querySelector(\n      '#type'\n    ) as HTMLInputElement;\n    if(this.nameInputElement == null)\n    console.log(\"null element\");\n    this.amountInputElement = this.element.querySelector(\n      '#amountInsertion'\n    ) as HTMLInputElement;\n    // this.peopleInputElement = this.element.querySelector(\n    //   '#people'\n    // ) as HTMLInputElement;\n\n    this.configure();\n    // this.attach();\n  }\n\n  private gatherUserInput(): [string, number] | void {\n    const enteredName = this.nameInputElement.value;\n    const enteredAmount = this.amountInputElement.value;\n    // const enteredPeople = this.peopleInputElement.value;\n\n    if (\n      enteredName.trim().length === 0 ||\n      enteredAmount.trim().length === 0 \n    //   ||enteredPeople.trim().length === 0\n    ) {\n      alert('Invalid input, please try again!');\n      return;\n    } else {\n      return [enteredName, +enteredAmount];\n    }\n  }\n\n  private clearInputs() {\n    this.nameInputElement.value = '';\n    this.amountInputElement.value = '';\n    // this.peopleInputElement.value = '';\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, amount] = userInput;\n      console.log(title, amount);\n      this.clearInputs();\n    }\n  }\n\n  private configure() {\n    this.element.addEventListener('submit', this.submitHandler);\n  }\n\n//   private attach() {\n//     this.hostElement.insertAdjacentElement('afterbegin', this.element);\n//   }\n}\n\nconst prjInput = new ProjectInput();"]}