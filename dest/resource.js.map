{"version":3,"file":"resource.js","sourceRoot":"","sources":["../src/resource.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsInt, validate } from \"class-validator\";\r\nimport { Post } from \"./validators\";\r\nimport { prjOutput } from \"./ProjectInput.js\";\r\n\r\n// Project State Management\r\ntype Listener = (items: Resource[]) => void;\r\nexport enum Result {\r\n  Add,\r\n  Update,\r\n}\r\n\r\nexport class Resource {\r\n  private name: string;\r\n  @IsInt()\r\n  private amount: number;\r\n\r\n  constructor(name: string, amount: number) {\r\n    this.name = name;\r\n    this.amount = amount;\r\n  }\r\n  public set updateResourceAmount(@isAnInteger amount: number) {\r\n    this.amount += amount;\r\n  }\r\n  public get getResourceName() {\r\n    return this.name;\r\n  }\r\n  public get getResourceAmount() {\r\n    return this.amount;\r\n  }\r\n}\r\nexport class ResourceStorage {\r\n  [f: string]: any; // for generic listener execution\r\n  private listeners: Listener[] = [];\r\n  private resources: Resource[] = [];\r\n  private static instance: ResourceStorage;\r\n\r\n  private constructor() {\r\n    this.addListener(this.removesEmptyResources);\r\n  }\r\n\r\n  public removesEmptyResources(resources: Resource[]) { \r\n    // remove/filter existing resources from resources array with amount of 0 == empty\r\n    const relevantResources = resources.filter((r) => {\r\n      if (r.getResourceAmount > 0) {\r\n        return true;\r\n      } else return false;\r\n    });\r\n\r\n    this.setResources = relevantResources;\r\n  }\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    this.instance = new ResourceStorage();\r\n    return this.instance;\r\n  }\r\n\r\n  addListener(listenerFn: Listener) {\r\n    this.listeners.push(listenerFn);\r\n  }\r\n\r\n  executeListeners() {\r\n    for (const listenerFn of this.listeners) {\r\n      // (this as any)[listenerFn.name](this.resources.slice());\r\n      this[listenerFn.name](this.resources);\r\n    }\r\n  }\r\n\r\n  addResource(title: string, amount: number): Result | null {\r\n    // a complex function for adding a new resource or updating an existing resource (+/- amount)\r\n    // create instance of resource\r\n    const nr = new Resource(\r\n      title,\r\n      amount\r\n      // ProjectStatus.Active\r\n    );\r\n    // first checks if input isn't for the first item of resource storage array or if it's of an existing item\r\n    //because there are 2 options wether we want to add a new item or update existing item\r\n    if (\r\n      Array.isArray(this.getResources) &&\r\n      this.getResources.length > 0 &&\r\n      this.getResources.some(function (r) {\r\n        return r.getResourceName === title;\r\n      })\r\n    ) {\r\n      // update item\r\n      this.UpdateExistingItemOrBorrowItem = nr;\r\n      return Result.Update;\r\n    } else if (this.resources.push(nr)) {\r\n      console.log(\"push new item\");\r\n      // add a new item to resources array\r\n      this.executeListeners();\r\n      prjOutput.renderResources(this.resources); // rendering the new data for output status  \r\n      return Result.Add;\r\n    }\r\n    return null; // failed\r\n  }\r\n\r\n  get getResources() {\r\n    if (this.resources) return this.resources;\r\n    else return null;\r\n  }\r\n  set setResources(array: Resource[]) {\r\n    this.resources = array;\r\n  }\r\n  get getResourcesLength(): number {\r\n    return this.resources.length;\r\n  }\r\n  \r\n  set UpdateExistingItemOrBorrowItem(r: Resource) {\r\n    //a function to update existing item amount (+/- amount)\r\n    const i = this.resources.findIndex(\r\n      (checked) => checked.getResourceName === r.getResourceName\r\n    );\r\n    // find existing item to be able to update\r\n\r\n    if (Array.isArray(this.getResources)) {\r\n      // stores previous amount to add new amount and for validation\r\n      const previousAmount = this.getResources[i].getResourceAmount;\r\n      try {\r\n        const sum = r.getResourceAmount + previousAmount; // total amount\r\n\r\n        if (sum < 0) { // validation we have sufficient amount\r\n          alert(\r\n            \"Cannot take more than \" + previousAmount + \" from this resource\"\r\n          );\r\n          console.log(\r\n            \"Cannot take more than \" + previousAmount + \" from this resource\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        alert(\r\n          `update given resource: ${r.getResourceName} with given amount: ${sum}`\r\n        );\r\n        console.log(\r\n          `update given resource: ${r.getResourceName} with given amount: ${sum}`\r\n        );\r\n      } catch (err) {\r\n\r\n        alert(\r\n          \"Update failed: updated amount is not in range (1 - \" +\r\n            Number.MAX_SAFE_INTEGER +\r\n            \")\"\r\n        );\r\n        console.log(\r\n          \"Update failed: updated amount is not in range (1 - \" +\r\n            Number.MAX_SAFE_INTEGER +\r\n            \")\"\r\n        );\r\n        console.log(err);\r\n        return;\r\n      }\r\n      this.getResources[i].updateResourceAmount = r.getResourceAmount; // adding more amount or reducing amount\r\n      this.executeListeners(); // removes empty resources from resource storage array\r\n      prjOutput.renderResources(this.resources); // render updated status of resource storage array\r\n      return;\r\n    } else {\r\n      throw new Error(\"Update failed: there isn't any item in the storage\");\r\n    }\r\n  }\r\n}\r\n"]}