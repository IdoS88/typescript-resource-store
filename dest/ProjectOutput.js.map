{"version":3,"file":"ProjectOutput.js","sourceRoot":"","sources":["../src/ProjectOutput.ts"],"names":[],"mappings":";;;AAGA,MAAa,aAAa;IAKxB;QACE,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,cAAc,CAC5C,gBAAgB,CACO,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAoB,CAAC;QACxE,MAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,CACtC,IAAI,CAAC,eAAe,CAAC,OAAO,EAC5B,IAAI,CACL,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,iBAAgC,CAAC;QAC7D,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,gBAAgB,CAAC;QACnC,IAAI,IAAI,CAAC,OAAO,YAAY,OAAO;YAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QAC5E,eAAe;QACf,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,oCAAoC;QAC1D,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,2CAA2C;IAC5D,CAAC;IACO,MAAM;QACZ,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACrE,CAAC;IACM,eAAe,CAAC,SAAqB;QAC1C,kEAAkE;QAClE,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAE,CAAC,CAAC,uCAAuC;QAC5F,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,0CAA0C;QAClE,IAAI,SAAS,EAAE;YACb,yBAAyB;YACzB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,IAAI,CAAC,oBAAoB,CAAC,OAA+B,CAAC,CAAC;aAC5D;iBAAM,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjC,OAAO,CAAC,SAAS;oBACf,qBAAqB;wBACrB,SAAS,CAAC,MAAM;wBAChB,iDAAiD,CAAC;aACrD;iBAAM;gBACL,OAAO,CAAC,SAAS;oBACf,sBAAsB;wBACtB,SAAS,CAAC,MAAM;wBAChB,qDAAqD,CAAC;aACzD;YAED,8CAA8C;YAC9C,KAAK,MAAM,OAAO,IAAI,SAAS,EAAE;gBAC/B,IAAI,OAAO,CAAC,WAAW,EAAE;oBACvB,OAAO,CAAC,SAAS;wBACf,sBAAsB;4BACtB,OAAO,CAAC,eAAe;4BACvB,aAAa;4BACb,OAAO,CAAC,iBAAiB,CAAC;iBAC7B;aACF;SACF;IACH,CAAC;IACO,oBAAoB,CAAC,CAAuB;QAClD,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CACtC,gDAAgD,CACjD,CAAC;QACF,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IACO,aAAa;QACnB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAE,CAAC,WAAW,GAAG,gBAAgB,CAAC,CAAC,eAAe;QACjF,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,gCAAgC;QACvE,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC;QACjB,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,+CAA+C;IAC/E,CAAC;CACF;AApED,sCAoEC","sourcesContent":["import { data } from \"./ProjectInput.js\";\r\nimport { Resource } from \"./resource.js\";\r\n\r\nexport class ProjectOutput {\r\n  templateElement: HTMLTemplateElement;\r\n  hostElement: HTMLDivElement;\r\n  element: HTMLElement; // section html element\r\n\r\n  constructor() {\r\n    this.templateElement = document.getElementById(\r\n      \"storage-status\"\r\n    )! as HTMLTemplateElement;\r\n    this.hostElement = document.getElementById(\"output\")! as HTMLDivElement;\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    );\r\n    this.element = importedNode.firstElementChild as HTMLElement;\r\n    this.element.id = \"output-project\";\r\n    if (this.element instanceof Element) console.log(\"element isn't undefined\");\r\n    // first output\r\n    this.renderContent(); // render default messages in output\r\n    this.attach(); // adding elements of output to div section\r\n  }\r\n  private attach() {\r\n    this.hostElement.insertAdjacentElement(\"afterbegin\", this.element);\r\n  }\r\n  public renderResources(resources: Resource[]) {\r\n    // a function for rendering the status output of resources storage\r\n    const content = document.getElementById(\"content\")!; // paragraph created in rendercontent()\r\n    content.innerHTML = \"\"; // reseting content text for new rendering\r\n    if (resources) {\r\n      //rendering intro message\r\n      if (resources.length === 0) {\r\n        this.renderDefaultMessage(content as HTMLParagraphElement);\r\n      } else if (resources.length === 1) {\r\n        content.innerHTML =\r\n          \"Currently there is \" +\r\n          resources.length +\r\n          \" resource in storage:<br> the resource is:<br> \";\r\n      } else {\r\n        content.innerHTML =\r\n          \"Currently there are \" +\r\n          resources.length +\r\n          \" resources in storage: <br> the resources are: <br>\";\r\n      }\r\n\r\n      //rendering actual content of resource storage\r\n      for (const prjItem of resources) {\r\n        if (content.textContent) {\r\n          content.innerHTML +=\r\n            \"<br> resource name: \" +\r\n            prjItem.getResourceName +\r\n            \"\\t amount: \" +\r\n            prjItem.getResourceAmount;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private renderDefaultMessage(p: HTMLParagraphElement) {\r\n    const textNode = document.createTextNode(\r\n      \"Currently there aren't any resource in storage\"\r\n    );\r\n    p.appendChild(textNode);\r\n  }\r\n  private renderContent() {\r\n    this.element.querySelector(\"h2\")!.textContent = \"Storage Status\"; // title header\r\n    const p = document.createElement(\"p\"); // paragraph for showing content\r\n    p.id = \"content\";\r\n    this.renderDefaultMessage(p); // set default status message with no resources\r\n  }\r\n}\r\n"]}