{"version":3,"file":"ProjectOutput.js","sourceRoot":"","sources":["../src/ProjectOutput.ts"],"names":[],"mappings":";;;AAAA,iDAAsC;AAEtC,MAAa,aAAa;IAKxB;QACE,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,cAAc,CAC5C,gBAAgB,CACO,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAoB,CAAC;QACxE,MAAM,YAAY,GAAG,QAAQ,CAAC,UAAU,CACtC,IAAI,CAAC,eAAe,CAAC,OAAO,EAC5B,IAAI,CACL,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,iBAAgC,CAAC;QAC7D,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,gBAAgB,CAAC;QACnC,IAAI,IAAI,CAAC,OAAO,YAAY,OAAO;YAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QAC5E,eAAe;QACf,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,mBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IACO,MAAM;QACZ,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACrE,CAAC;IACO,eAAe;QACrB,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAE,CAAC,CAAC,uCAAuC;QAC5F,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,0CAA0C;QAClE,IAAI,mBAAI,CAAC,YAAY,EAAE;YACrB,yBAAyB;YACzB,IAAI,mBAAI,CAAC,kBAAkB,KAAK,CAAC,EAAE;gBACjC,IAAI,CAAC,oBAAoB,CAAC,OAA+B,CAAC,CAAC;aAC5D;iBAAM,IAAI,mBAAI,CAAC,kBAAkB,KAAK,CAAC,EAAE;gBACxC,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CACtC,qBAAqB;oBACnB,mBAAI,CAAC,kBAAkB;oBACvB,mDAAmD,CACtD,CAAC;gBACF,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC/B;iBAAM;gBACL,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CACtC,sBAAsB;oBACpB,mBAAI,CAAC,kBAAkB;oBACvB,qDAAqD,CACxD,CAAC;gBACF,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC/B;YAGD,2BAA2B;YAC3B,KAAK,MAAM,OAAO,IAAI,mBAAI,CAAC,YAAY,EAAE;gBACvC,OAAO,CAAC,WAAW;oBACjB,sBAAsB;wBACtB,OAAO,CAAC,eAAe;wBACvB,aAAa;wBACb,OAAO,CAAC,iBAAiB,CAAC;aAC7B;SACF;IACH,CAAC;IACO,oBAAoB,CAAC,CAAuB;QAClD,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CACtC,gDAAgD,CACjD,CAAC;QACF,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IACO,aAAa;QACnB,4BAA4B;QAC5B,mDAAmD;QACnD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAE,CAAC,WAAW,GAAG,gBAAgB,CAAC,CAAC,eAAe;QACjF,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,gCAAgC;QACvE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,+CAA+C;QAC7E,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC;QACjB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;CACF;AA3ED,sCA2EC","sourcesContent":["import { data } from \"./ProjectInput\";\r\n\r\nexport class ProjectOutput {\r\n  templateElement: HTMLTemplateElement;\r\n  hostElement: HTMLDivElement;\r\n  element: HTMLElement;\r\n\r\n  constructor() {\r\n    this.templateElement = document.getElementById(\r\n      \"storage-status\"\r\n    )! as HTMLTemplateElement;\r\n    this.hostElement = document.getElementById(\"output\")! as HTMLDivElement;\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    );\r\n    this.element = importedNode.firstElementChild as HTMLElement;\r\n    this.element.id = \"output-project\";\r\n    if (this.element instanceof Element) console.log(\"element isn't undefined\");\r\n    // first output\r\n    this.renderContent();\r\n\r\n    data.addListener(this.renderResources);\r\n    this.attach();\r\n  }\r\n  private attach() {\r\n    this.hostElement.insertAdjacentElement(\"afterbegin\", this.element);\r\n  }\r\n  private renderResources() {\r\n    const content = document.getElementById(\"content\")!; // paragraph created in rendercontent()\r\n    content.innerHTML = \"\"; // reseting content text for new rendering\r\n    if (data.getResources) {\r\n      //rendering intro message\r\n      if (data.getResourcesLength === 0) {\r\n        this.renderDefaultMessage(content as HTMLParagraphElement);\r\n      } else if (data.getResourcesLength === 1) {\r\n        const textNode = document.createTextNode(\r\n          \"Currently there is \" +\r\n            data.getResourcesLength +\r\n            \" resource in storage: \\r\\n the resource is: \\r\\n \"\r\n        );\r\n        content.appendChild(textNode);\r\n      } else {\r\n        const textNode = document.createTextNode(\r\n          \"Currently there are \" +\r\n            data.getResourcesLength +\r\n            \" resources in storage: \\r\\n the resources are: \\r\\n\"\r\n        );\r\n        content.appendChild(textNode);\r\n      }\r\n\r\n\r\n      //rendering actual contents\r\n      for (const prjItem of data.getResources) {\r\n        content.textContent +=\r\n          \"\\r\\n resource name: \" +\r\n          prjItem.getResourceName +\r\n          \"\\t amount: \" +\r\n          prjItem.getResourceAmount;\r\n      }\r\n    }\r\n  }\r\n  private renderDefaultMessage(p: HTMLParagraphElement) {\r\n    const textNode = document.createTextNode(\r\n      \"Currently there aren't any resource in storage\"\r\n    );\r\n    p.appendChild(textNode);\r\n  }\r\n  private renderContent() {\r\n    // const headerId = \"title\";\r\n    // this.element.querySelector('h2')!.id = headerId;\r\n    this.element.querySelector(\"h2\")!.textContent = \"Storage Status\"; // title header\r\n    const p = document.createElement(\"p\"); // paragraph for showing content\r\n    this.renderDefaultMessage(p); // set default status message with no resources\r\n    p.id = \"content\";\r\n    this.element.appendChild(p);\r\n  }\r\n}\r\n"]}